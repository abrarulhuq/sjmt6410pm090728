#ifndef _AniPolkaFrag_h_
#define _AniPolkaFrag_h_


// Header generated from binary by WriteAsBinHeader()..
static const int AniPolkaFragLength = 270;
static const unsigned int AniPolkaFrag[AniPolkaFragLength]={
    0x20205350,    0xFFFF0008,    0x00000048,    0x01020000,    0x0000002A,    0x0000000E,    0x00000000,    0x00000000,    0x00000003,    0x00000000,
    0x00000001,    0x00000000,    0x00000000,    0x00000000,    0x00000000,    0x00000000,    0x0000001D,    0x00000000,    0x00000000,    0x0000A400,
    0x040822A4,    0x00000000,    0x00000000,    0x01020000,    0x08882200,    0x00000000,    0x00000000,    0x0102A400,    0x03382200,    0x00000000,
    0x03000000,    0x00010002,    0x03702190,    0x00000000,    0x00000000,    0x01010000,    0x0F3820F9,    0x00000000,    0x00000000,    0x0101A441,
    0x223820F9,    0x00000000,    0x00A40001,    0x4202A401,    0x0EB82000,    0x00000000,    0x04000000,    0x0100A442,    0x023820A4,    0x00000000,
    0x00000000,    0x02050000,    0x00F02190,    0x00000000,    0x05000000,    0x0101A402,    0x040823F9,    0x00000000,    0x00000000,    0x01030000,
    0x08882300,    0x00000000,    0x05000000,    0x0103A402,    0x03382300,    0x00000000,    0x03000000,    0x0102A401,    0x044020A4,    0x00000000,
    0x06000000,    0x01000002,    0x0A4020FF,    0x00000000,    0x07000000,    0x01000002,    0x020821FF,    0x00000000,    0x00000000,    0x0100A401,
    0x044020A4,    0x00000000,    0x00000000,    0x01000000,    0x08C020FF,    0x00000000,    0x00000000,    0x01000000,    0x084020FF,    0x00000000,
    0x08000000,    0x01000002,    0x0D0861FF,    0x00000000,    0x00000000,    0x06010000,    0x18800200,    0x00000000,    0x00000000,    0x020D0000,
    0x00902100,    0x00000000,    0x00000000,    0x00000000,    0x18000100,    0x00000000,    0x00000000,    0x02060000,    0x00902100,    0x00000000,
    0x02000000,    0x0002A400,    0x040824A4,    0x00000000,    0x00000000,    0x01040000,    0x08882400,    0x00000000,    0x02000000,    0x0104A400,
    0x03382400,    0x00000000,    0x03000000,    0x0104A401,    0x023823A4,    0x00000000,    0x03000000,    0x0103A401,    0x040824A4,    0x00000000,
    0x00000000,    0x01040000,    0x08882400,    0x00000000,    0x03000000,    0x0104A401,    0x03382400,    0x00000000,    0x02000000,    0x0104A401,
    0x044024A4,    0x00000000,    0x06000000,    0x01040002,    0x0A4024FF,    0x00000000,    0x00000000,    0x01040000,    0x074024FF,    0x00000000,
    0x04000000,    0x020AFF01,    0x03402400,    0x00000000,    0x00000000,    0x01040000,    0x064024FF,    0x00000000,    0x01000000,    0x02015541,
    0x027825E4,    0x00000000,    0x00000000,    0x01050000,    0x20F825E4,    0x00000000,    0x01E40105,    0x020C5501,    0x0EF825E4,    0x00000000,
    0x05000000,    0x0101E401,    0x03782500,    0x00000000,    0x04000000,    0x0105FF01,    0x027820E4,    0x00000000,    0x00000000,    0x01000000,
    0x00FA10E4,    0x00000000,    0x00000000,    0x00000000,    0x1E000000,    0x00000000,    0x00000000,    0x00000000,    0x00000000,    0x00000000,
    0x3F800000,    0x3F800000,    0x3F800000,    0x3F800000,    0x3F000000,    0x00000000,    0x00000000,    0x00000000,    0x40000000,    0x00000000,
    0x00000000,    0x00000000,    0x3E800000,    0x3E800000,    0x3E800000,    0x00000000,    0x00000000,    0x00000000,    0x00000000,    0x00000000,
    0x00000000,    0x00000000,    0x00000000,    0x00000000,    0x3E99999A,    0x00000000,    0x00000000,    0x00000000,    0x3E4CCCCD,    0x00000000,
    0x00000000,    0x00000000,    0x3F800000,    0x00000000,    0x00000000,    0x00000000,    0x42A00000,    0x00000000,    0x00000000,    0x00000000,
    0x3F800000,    0x3F800000,    0x3F800000,    0x3F800000,    0x3F800000,    0x00000000,    0x00000000,    0x3F800000,    0x3F800000,    0x00000000,
    0x00000000,    0x00000000,    0x00000000,    0x00000005,    0x00000009,    0x00000000,    0x00000004,    0x00000006,    0x00000006,    0x00000006,
    0x00000000,    0x00000000,    0x0000000D,    0x00000006,    0x00000006,    0x00000000,    0x00000008,    0x00000014,    0x00000008,    0x00000009,
    0x00020001,    0x00000014,    0x6F50534D,    0x6F6E0073,    0x6C616D72,    0x65796500,    0x00636556,    0x6867696C,    0x736F5074,    0x00000000,};

//checksum generated by simpleCheckSum()
static const unsigned int AniPolkaFragCheckSum = 54;

static const char* AniPolkaFragText = 
    "\n"
    "\n"
    "#ifdef GL_ES\n"
    "precision highp float;\n"
    "#endif \n"
    "\n"
    "varying vec4 MSPos;\n"
    "varying vec3 normal;\n"
    "varying vec3 eyeVec;\n"
    "\n"
    "const vec4 fooColor = vec4(0.0,1.0,0.0,0.0);\n"
    "\n"
    "//Consts\n"
    "const float spacing=0.5, dotSize=0.2;\n"
    "const float rcpSpacing = 1.0/spacing;\n"
    "const vec4 inColor = vec4(1.0,0.0,0.0,1.0);\n"
    "const vec4 outColor = vec4(1.0,1.0,1.0,1.0);\n"
    "const vec4 litColor = vec4(0.0,0.0,1.0,1.0);\n"
    "const float ambient = 0.3;\n"
    "\n"
    "\n"
    "uniform vec4 lightPos;\n"
    "\n"
    "void main()\n"
    "{\n"
    "        \n"
    "        vec4 color;\n"
    "        \n"
    "        vec3 N = normalize(normal);\n"
    "        vec3 offset = (MSPos.xyz - (spacing * floor(MSPos.xyz*rcpSpacing))) - vec3(spacing*0.5);\n"
    "        \n"
    "\n"
    "        vec3 L = normalize(lightPos.xyz);\n"
    "        \n"
    "        float intensity = max(dot(N,L),0.0) + ambient;\n"
    "        \n"
    "        float len = length(offset);\n"
    "        \n"
    "        float ds = dotSize;\n"
    "        float inSphere=0.0;\n"
    "        \n"
    "        //for(int i=0; i<10; i++)\n"
    "        {\n"
    "                if(ds < len)\n"
    "                        inSphere += 1.0;\n"
    "                else \n"
    "                        inSphere += 0.0;\n"
    "        }\n"
    "        \n"
    "        //inSphere = step(len, dotSize);\n"
    "        \n"
    "        vec3 E = normalize(eyeVec);\n"
    "        float spec = max(dot(normalize(E+L),N),0.0);\n"
    "        spec = pow(spec,80.0);\n"
    "        \n"
    "        color = mix(outColor, inColor, inSphere);\n"
    "       \n"
    "    gl_FragColor = intensity*color+vec4(spec);\n"
    "}";

#ifdef GL_HELPERS_INCLUDED
//glHelpers.h must be included BEFORE any of the shader header files. Also make sure you have the latest version of glHelpers.h
static ghShader AniPolkaFragShader(AniPolkaFragText, AniPolkaFrag, AniPolkaFragLength, AniPolkaFragCheckSum);


#endif


#endif //_AniPolkaFrag_h_
